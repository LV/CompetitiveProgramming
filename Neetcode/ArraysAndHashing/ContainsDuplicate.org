#+title: Contains Duplicate
#+author: Luis Victoria
#+date: <2023-09-19>
#+question: [[https://leetcode.com/problems/contains-duplicate][217]]

* HOLD Sort and Find
/Time:/ $O(n \log n)$
/Space:/ $O(1)$

Space is minimized in this solution as only the original array is manipulated. Since no additional memory is allocated (besides the counters and the in-place sorting algorithms ~list.sort()~ and ~std::sort()~), this solution is $O(1)$ in space.

*RESEARCH*: ~list.sort()~ and ~std::sort()~ recursive stack worst case. Might be $O(\log n)

Sorting is a $O(n \log n)$ process; doing so removes the need of doing a nested loop search which would be a $O(n^2)$ process.

** Python
#+begin_src python
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        if len(nums) == 1:
            return False

        # Sort the array; O(nlogn)
        # Avoids nested loop search; O(n^2)
        nums.sort()

        # Search for duplicates in sorted array; O(n)
        for i in range(1, len(nums)):
            if nums[i] == nums[i-1]:
                return True

        return False
#+end_src

** C++
#+begin_src c++
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        if(nums.size() == 1) return false;

        // Sort the array; O(nlogn)
        // Avoids nested loop search; O(n^2)
        std::sort(nums.begin(), nums.end());

        // Search for duplicates in sorted array; O(n)
        int index = 1;
        while(index < nums.size()) {
            if(nums[index] == nums[index-1]) return true;
            index++;
        }

        return false;
    }
};
#+end_src

* TODO HashSet
/Time:/ $O(n)$
/Space:/ $O(n)$
